import socket
import threading
import time

def stress_test(ip, puerto, conexiones, mensajes_por_conexion, intervalo):
    def cliente_simulado():
        try:
            cliente = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            cliente.connect((ip, puerto))
            for _ in range(mensajes_por_conexion):
                try:
                    cliente.sendall(b"Mensaje de prueba desde pentesting.")
                    respuesta = cliente.recv(1024) 
                    if respuesta:
                        print(f"[Servidor respondió]: {respuesta.decode()}")
                except Exception as e:
                    print(f"[Error] Fallo en el envío: {e}")
                time.sleep(intervalo) 
            cliente.close() 
        except Exception as e:
            print(f"[Error] No se pudo conectar al servidor: {e}")

    # CREA MÚLTIPLES HILOS PARA CONEXIONES SIMULTÁNEAS
    hilos = []
    for _ in range(conexiones):
        hilo = threading.Thread(target=cliente_simulado)
        hilos.append(hilo)
        hilo.start()

    for hilo in hilos:
        hilo.join()

if __name__ == "__main__":
    servidor_ip = "127.0.0.1"  
    servidor_puerto = 8080 

    while True:
        try:
            print("\n=== Pentesting de conexión al servidor ===")
            conexiones_simultaneas = int(input("Número de conexiones simultáneas: "))
            mensajes_por_conexion = int(input("Mensajes por conexión: "))
            intervalo = float(input("Intervalo entre mensajes (segundos): "))

            print(f"Iniciando test de estrés en {servidor_ip}:{servidor_puerto}")
            stress_test(servidor_ip, servidor_puerto, conexiones_simultaneas, mensajes_por_conexion, intervalo)
            print("Test de estrés completado.")

            repetir = input("¿Quieres realizar otra prueba? (s/n): ").strip().lower()
            if repetir != 's':
                print("Finalizando el programa.")
                break
        except ValueError:
            print("[Error] Por favor, introduce valores válidos para los parámetros.")
        except KeyboardInterrupt:
            print("\n[Interrupción] Finalizando el programa.")
            break
